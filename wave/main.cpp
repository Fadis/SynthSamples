#include "mbed.h"
#include "fixed.hpp"

AnalogOut audio_out(p18);
DigitalIn button(p19);

class Envelope {
  bool note_stat;
  fixed32< 16 > prev;
  fixed32< 16 > off_time;
public:
  Envelope() : note_stat( true ), prev( 0.0f ) {}
  void off( fixed32< 16 > _off_time ) { note_stat = false; off_time = _off_time; }
  fixed32< 16 > operator()( fixed32< 16 > _time ) {
    if( note_stat ) {
      if( _time < 1.0f ) prev = 1.0f - ( _time );
      else prev = 0.0f;
      return prev;
    }
    else {
      _time -= off_time;
      return ( prev - _time < 0.0f ) ? static_cast< fixed32< 16 > >( 0.0f ) : prev - _time;
    }
  }
};

class Guiter {
public:
  virtual fixed32< 16 > operator()( fixed32< 16 > _pos ) {
static const int16_t guiter_table[ 512 ] = {
 -32735,  -32583,  -32431,  -32279,  -32127,  -31975,  -31823,  -31671, 
 -31519,  -31355,  -31191,  -31027,  -30863,  -30699,  -30535,  -30371, 
 -30207,  -29663,  -29119,  -28575,  -28031,  -27487,  -26943,  -26399, 
 -25855,  -25567,  -25279,  -24991,  -24703,  -24415,  -24127,  -23839, 
 -23551,  -23323,  -23095,  -22867,  -22639,  -22411,  -22183,  -21955, 
 -21727,  -21507,  -21287,  -21067,  -20847,  -20627,  -20407,  -20187, 
 -19967,  -19851,  -19735,  -19619,  -19503,  -19387,  -19271,  -19155, 
 -19039,  -18771,  -18503,  -18235,  -17967,  -17699,  -17431,  -17163, 
 -16895,  -16727,  -16559,  -16391,  -16223,  -16055,  -15887,  -15719, 
 -15551,  -15499,  -15447,  -15395,  -15343,  -15291,  -15239,  -15187, 
 -15135,  -15059,  -14983,  -14907,  -14831,  -14755,  -14679,  -14603, 
 -14527,  -14371,  -14215,  -14059,  -13903,  -13747,  -13591,  -13435, 
 -13279,  -12935,  -12591,  -12247,  -11903,  -11559,  -11215,  -10871, 
 -10527,  -10047,   -9567,   -9087,   -8607,   -8127,   -7647,   -7167, 
  -6687,   -6307,   -5927,   -5547,   -5167,   -4787,   -4407,   -4027, 
  -3647,   -3411,   -3175,   -2939,   -2703,   -2467,   -2231,   -1995, 
  -1759,   -1511,   -1263,   -1015,    -767,    -519,    -271,     -23, 
    223,     731,    1239,    1747,    2255,    2763,    3271,    3779, 
   4287,    4771,    5255,    5739,    6223,    6707,    7191,    7675, 
   8159,    8835,    9511,   10187,   10863,   11539,   12215,   12891, 
  13567,   14087,   14607,   15127,   15647,   16167,   16687,   17207, 
  17727,   17887,   18047,   18207,   18367,   18527,   18687,   18847, 
  19007,   19879,   20751,   21623,   22495,   23367,   24239,   25111, 
  25983,   26063,   26143,   26223,   26303,   26383,   26463,   26543, 
  26623,   27347,   28071,   28795,   29519,   30243,   30967,   31691, 
  32415,   32199,   31983,   31767,   31551,   31335,   31119,   30903, 
  30687,   30307,   29927,   29547,   29167,   28787,   28407,   28027, 
  27647,   27007,   26367,   25727,   25087,   24447,   23807,   23167, 
  22527,   22335,   22143,   21951,   21759,   21567,   21375,   21183, 
  20991,   21127,   21263,   21399,   21535,   21671,   21807,   21943, 
  22079,   22199,   22319,   22439,   22559,   22679,   22799,   22919, 
  23039,   22939,   22839,   22739,   22639,   22539,   22439,   22339, 
  22239,   22051,   21863,   21675,   21487,   21299,   21111,   20923, 
  20735,   20575,   20415,   20255,   20095,   19935,   19775,   19615, 
  19455,   19263,   19071,   18879,   18687,   18495,   18303,   18111, 
  17919,   17751,   17583,   17415,   17247,   17079,   16911,   16743, 
  16575,   16319,   16063,   15807,   15551,   15295,   15039,   14783, 
  14527,   14303,   14079,   13855,   13631,   13407,   13183,   12959, 
  12735,   12391,   12047,   11703,   11359,   11015,   10671,   10327, 
   9983,    9455,    8927,    8399,    7871,    7343,    6815,    6287, 
   5759,    5335,    4911,    4487,    4063,    3639,    3215,    2791, 
   2367,    2135,    1903,    1671,    1439,    1207,     975,     743, 
    511,     407,     303,     199,      95,      -7,    -111,    -215, 
   -319,    -343,    -367,    -391,    -415,    -439,    -463,    -487, 
   -511,    -575,    -639,    -703,    -767,    -831,    -895,    -959, 
  -1023,   -1147,   -1271,   -1395,   -1519,   -1643,   -1767,   -1891, 
  -2015,   -2179,   -2343,   -2507,   -2671,   -2835,   -2999,   -3163, 
  -3327,   -3619,   -3911,   -4203,   -4495,   -4787,   -5079,   -5371, 
  -5663,   -5847,   -6031,   -6215,   -6399,   -6583,   -6767,   -6951, 
  -7135,   -7235,   -7335,   -7435,   -7535,   -7635,   -7735,   -7835, 
  -7935,   -7935,   -7935,   -7935,   -7935,   -7935,   -7935,   -7935, 
  -7935,   -7839,   -7743,   -7647,   -7551,   -7455,   -7359,   -7263, 
  -7167,   -7015,   -6863,   -6711,   -6559,   -6407,   -6255,   -6103, 
  -5951,   -5835,   -5719,   -5603,   -5487,   -5371,   -5255,   -5139, 
  -5023,   -5079,   -5135,   -5191,   -5247,   -5303,   -5359,   -5415, 
  -5471,   -5611,   -5751,   -5891,   -6031,   -6171,   -6311,   -6451, 
  -6591,   -6759,   -6927,   -7095,   -7263,   -7431,   -7599,   -7767, 
  -7935,   -8443,   -8951,   -9459,   -9967,  -10475,  -10983,  -11491, 
 -11999,  -12291,  -12583,  -12875,  -13167,  -13459,  -13751,  -14043, 
 -14335,  -14763,  -15191,  -15619,  -16047,  -16475,  -16903,  -17331, 
 -17759,  -18227,  -18695,  -19163,  -19631,  -20099,  -20567,  -21035, 
 -21503,  -21787,  -22071,  -22355,  -22639,  -22923,  -23207,  -23491, 
 -23775,  -24243,  -24711,  -25179,  -25647,  -26115,  -26583,  -27051, 
 -27519,  -28171,  -28823,  -29475,  -30127,  -30779,  -31431,  -32083, 
};
    fixed32< 16 > result;
    fixed32< 16 > a4 = _pos * 220.0f;
    int pos = ( a4.get() >> 7 ) % 512;
//    pos = pos * 880 % 512;
    int32_t value = static_cast< int32_t >( guiter_table[ pos ] ) << 1;
    result.set( value );
    return result * envelope( _pos );
  }
  void off( fixed32< 16 > _off_time ) { envelope.off( _off_time ); }
private:
  Envelope envelope;
};

int main() {
  while(1) {
    Guiter guiter;
    fixed32< 16 > time, note_off_time;
    for( time = 0.0f; button; time += 1.0f/16000.0f ) {
      Timer used_time;
      used_time.start();
      audio_out = guiter( time ) * 0.4f + 0.5f;
      used_time.stop();
      wait(1.0f/16000.0f-used_time.read());
    }
    guiter.off( time );
    for( ; !button; time += 1.0f/16000.0f ) {
      Timer used_time;
      used_time.start();
      audio_out = guiter( time ) * 0.4f + 0.5f;
      used_time.stop();
      wait(1.0f/16000.0f-used_time.read());
    }
  }
}
